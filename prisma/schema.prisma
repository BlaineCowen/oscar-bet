// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")  // This should be your Prisma Accelerate URL
  directUrl = env("DIRECT_URL")    // This should be your direct Neon connection URL
}

model User {
  id             String            @id @default(cuid())
  name           String?
  email          String            @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  accounts       Account[]
  bets           Bet[]
  participantIn  GameParticipant[]
  adminGames     Game[]            @relation("GameAdmin")
  sessions       Session[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Game {
  id                String            @id @default(cuid())
  name              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  startDate         DateTime
  endDate           DateTime
  locked            Boolean           @default(false)
  initialBalance    Int
  adminId           String
  joinCode          String?
  joinCodeExpiresAt DateTime?
  bets              Bet[]
  categories        Category[]
  participants      GameParticipant[]
  admin             User              @relation("GameAdmin", fields: [adminId], references: [id])

  @@index([adminId])
  @@map("games")
}

model GameParticipant {
  id        String   @id @default(cuid())
  balance   Float
  gameId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bets      Bet[]
  game      Game     @relation(fields: [gameId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([gameId, userId])
  @@map("game_participants")
}

model Category {
  id        String    @id @default(cuid())
  name      String
  gameId    String
  winnerId  String?
  isLocked  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  game      Game      @relation(fields: [gameId], references: [id])
  winner    Nominee?  @relation("CategoryWinner", fields: [winnerId], references: [id])
  nominees  Nominee[]

  @@map("categories")
}

model Nominee {
  id            String     @id @default(cuid())
  name          String
  movie         String?
  odds          Float
  categoryId    String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  bets          Bet[]
  wonCategories Category[] @relation("CategoryWinner")
  category      Category   @relation(fields: [categoryId], references: [id])

  @@map("nominees")
}

model Bet {
  id                String          @id @default(cuid())
  amount            Float
  userId            String
  nomineeId         String
  gameId            String
  gameParticipantId String
  paidOut           Boolean         @default(false)
  payoutAmount      Float?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  game              Game            @relation(fields: [gameId], references: [id])
  gameParticipant   GameParticipant @relation(fields: [gameParticipantId], references: [id])
  nominee           Nominee         @relation(fields: [nomineeId], references: [id])
  user              User            @relation(fields: [userId], references: [id])

  @@map("bets")
}
